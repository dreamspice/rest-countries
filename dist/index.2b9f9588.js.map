{"mappings":"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","sources":["src/js/index.js"],"sourcesContent":["import \"./../sass/main.scss\";\r\nconst formEl = document.querySelector(\".form\");\r\nconst inputEl = document.querySelector(\".form__input\");\r\nconst countriesEl = document.querySelector(\".countries\");\r\nconst inputEls = document.querySelector(\".input-elements\");\r\nconst selectEl = document.querySelector(\".select\");\r\nconst buttonTheme = document.querySelector(\".nav__mode\");\r\n// storing data\r\nconst state = {\r\n  data: {},\r\n  currentCountry: {},\r\n  filterCountries: {},\r\n};\r\n\r\n// load all countries after page load finished\r\nwindow.addEventListener(\"load\", function () {\r\n  getAllCountries();\r\n});\r\n\r\n// search country and display it\r\nformEl.addEventListener(\"submit\", function (e) {\r\n  e.preventDefault();\r\n  if (inputEl.value) {\r\n    getSearchedCountry(inputEl.value);\r\n  } else {\r\n    countriesEl.textContent = \"\";\r\n    getAllCountries();\r\n  }\r\n});\r\n\r\n// get all countries\r\nconst getAllCountries = async function () {\r\n  try {\r\n    const res = await fetch(`https://restcountries.com/v3.1/all`);\r\n    const data = await res.json();\r\n    state.data = data.map((data) => {\r\n      return {\r\n        name: data.name.common,\r\n        population: data.population,\r\n        region: data.region,\r\n        capital: data.capital,\r\n        img: data.flags.svg,\r\n        subregion: data.subregion,\r\n        domain: data.tld,\r\n      };\r\n    });\r\n\r\n    // sorting countries a-z\r\n    state.data.sort(function (x, y) {\r\n      let a = x.name.toUpperCase(),\r\n        b = y.name.toUpperCase();\r\n      return a === b ? 0 : a > b ? 1 : -1;\r\n    });\r\n    // generate markup for each country\r\n    state.data.forEach((_, i) => {\r\n      const html = `\r\n  <div class=\"countries__country\">\r\n  <div class=\"countries__country-flag\">\r\n    <img\r\n      class=\"countries__country-flag--img\"\r\n      src=\"${state.data[i].img}\"\r\n    />\r\n  </div>\r\n  <div class=\"countries__details\">\r\n    <p class=\"countries__details--name\">${state.data[i].name}</p>\r\n    <p class=\"countries__details--population\">Population: ${state.data[i].population}</p>\r\n    <p class=\"countries__details--region\">Region: ${state.data[i].region}</p>\r\n    <p class=\"countries__details--capital\">Capital: ${state.data[i].capital}</p>\r\n  </div>\r\n</div>\r\n  `;\r\n      // display countries\r\n      countriesEl.insertAdjacentHTML(\"beforeend\", html);\r\n    });\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n};\r\n\r\n// get searched country\r\nconst getSearchedCountry = async function (country) {\r\n  try {\r\n    const res = await fetch(`https://restcountries.com/v3.1/name/${country}`);\r\n    const [data] = await res.json();\r\n    console.log(data);\r\n    state.currentCountry = {\r\n      flag: data.flags.svg,\r\n      name: data.name.common,\r\n      population: data.population,\r\n      region: data.region,\r\n    };\r\n    // generate markup\r\n    const html = `\r\n  <div class=\"countries__country\">\r\n  <div class=\"countries__country-flag\">\r\n    <img\r\n      class=\"countries__country-flag--img\"\r\n      src=\"${data.flags.svg}\"\r\n    />\r\n  </div>\r\n  <div class=\"countries__details\">\r\n    <p class=\"countries__details--name\">${data.name.common}</p>\r\n    <p class=\"countries__details--population\">Population: ${data.population}</p>\r\n    <p class=\"countries__details--region\">Region: ${data.region}</p>\r\n    <p class=\"countries__details--capital\">Capital: ${data.capital}</p>\r\n  </div>\r\n</div>\r\n  `;\r\n    countriesEl.textContent = \"\";\r\n    countriesEl.insertAdjacentHTML(\"beforeend\", html);\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n};\r\n\r\n// is about clicking country container\r\ncountriesEl.addEventListener(\"click\", async function (e) {\r\n  try {\r\n    const el = e.target.closest(\".countries__country\");\r\n    if (!el) return;\r\n\r\n    // get name of clicked country\r\n    let nameOfCountry = el.childNodes[3].firstElementChild.textContent;\r\n\r\n    const res = await fetch(\r\n      `https://restcountries.com/v3.1/name/${nameOfCountry}`\r\n    );\r\n    const [data] = await res.json();\r\n    // store it to current country\r\n    state.currentCountry = {\r\n      flag: data.flags.svg,\r\n      name: data.name.common,\r\n      population: data.population,\r\n      region: data.region,\r\n      subregion: data.subregion,\r\n      capital: data.capital,\r\n      domain: data.tld,\r\n      borders: data.borders,\r\n    };\r\n    countriesEl.textContent = \"\";\r\n    // generate markup\r\n    const html = `<div class=\"country\">\r\n  <button class=\"country__button\"><span>&larr;</span>Back</button>\r\n  <div class=\"country-flag\">\r\n    <img class=\"country-flag--img\" src=\"${state.currentCountry.flag}\" />\r\n  </div>\r\n  <div class=\"country__details\">\r\n  \r\n    <p class=\"country__details--name\">${state.currentCountry.name}</p>\r\n    <p class=\"country__details--native-name\">Native Name:<span class=\"country__details--data\">${\r\n      state.currentCountry.name\r\n    }</span></p>\r\n    <p class=\"country__details--population\">Population:<span class=\"country__details--data\">${\r\n      state.currentCountry.population\r\n    }</span></p>\r\n    <p class=\"country__details--region\">Region:<span class=\"country__details--data\">${\r\n      state.currentCountry.region\r\n    }</span></p>\r\n    <p class=\"country__details--subregion\">Sub Region:<span class=\"country__details--data\">${\r\n      state.currentCountry.subregion\r\n    }</span></p>\r\n    <p class=\"country__details--capital\">Capital:<span class=\"country__details--data\">${\r\n      state.currentCountry.capital\r\n    }</span></p>\r\n\r\n    <p class=\"country__details--domain\">Top Level Domain:<span class=\"country__details--data\">${\r\n      state.currentCountry.domain\r\n    }</span></p>\r\n\r\n    <p class=\"country__details--borders\">Border Countries:<span class=\"country__details--data\">${\r\n      state.currentCountry.borders\r\n        ? state.currentCountry.borders.join(\", \")\r\n        : \"None\"\r\n    }</span></p>\r\n  </div>\r\n</div>`;\r\n    // display country details\r\n    inputEls.style.opacity = \"0\";\r\n    countriesEl.insertAdjacentHTML(\"afterbegin\", html);\r\n\r\n    // back to showing all countries\r\n    const btn = document.querySelector(\".country__button\");\r\n    btn.addEventListener(\"click\", function () {\r\n      inputEls.style.opacity = \"1\";\r\n      countriesEl.textContent = \"\";\r\n      inputEl.value = \"\";\r\n      getAllCountries();\r\n    });\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\nselectEl.addEventListener(\"change\", function (e) {\r\n  countriesEl.textContent = \"\";\r\n  const selectedValue = e.target.value;\r\n  if (!selectedValue) getAllCountries();\r\n  const data = state.data.filter((data) => data.region === selectedValue);\r\n  data.forEach((_, i) => {\r\n    const html = `\r\n<div class=\"countries__country\">\r\n<div class=\"countries__country-flag\">\r\n  <img\r\n    class=\"countries__country-flag--img\"\r\n    src=\"${data[i].img}\"\r\n  />\r\n</div>\r\n<div class=\"countries__details\">\r\n  <p class=\"countries__details--name\">${data[i].name}</p>\r\n  <p class=\"countries__details--population\">Population: ${data[i].population}</p>\r\n  <p class=\"countries__details--region\">Region: ${data[i].region}</p>\r\n  <p class=\"countries__details--capital\">Capital: ${data[i].capital}</p>\r\n</div>\r\n</div>\r\n`;\r\n    // display countries\r\n    countriesEl.insertAdjacentHTML(\"beforeend\", html);\r\n  });\r\n});\r\n\r\nlet theme = localStorage.getItem(\"data-theme\");\r\ndocument.documentElement.setAttribute(\"data-theme\", theme);\r\n\r\nif (theme === \"dark\") {\r\n  buttonTheme.textContent = \"☀️ Light mode\";\r\n} else {\r\n  buttonTheme.textContent = \"🌚 Dark mode\";\r\n}\r\n\r\nconst changeThemeToDark = () => {\r\n  document.documentElement.setAttribute(\"data-theme\", \"dark\"); // set theme to dark\r\n  localStorage.setItem(\"data-theme\", \"dark\"); // save theme to local storage\r\n};\r\n\r\nconst changeThemeToLight = () => {\r\n  document.documentElement.setAttribute(\"data-theme\", \"light\"); // set theme light\r\n  localStorage.setItem(\"data-theme\", \"light\"); // save theme to local storage\r\n};\r\n\r\nbuttonTheme.addEventListener(\"click\", () => {\r\n  let theme = localStorage.getItem(\"data-theme\"); // Retrieve saved them from local storage\r\n  console.log(theme);\r\n  if (theme === \"dark\") {\r\n    changeThemeToLight();\r\n    buttonTheme.textContent = \"🌚 Dark mode\";\r\n  } else {\r\n    changeThemeToDark();\r\n    buttonTheme.textContent = \"☀️ Light mode\";\r\n  }\r\n});\r\n"],"names":["$8f6a480bb40b134f$var$formEl","document","querySelector","$8f6a480bb40b134f$var$inputEl","$8f6a480bb40b134f$var$countriesEl","$8f6a480bb40b134f$var$inputEls","$8f6a480bb40b134f$var$selectEl","$8f6a480bb40b134f$var$buttonTheme","$8f6a480bb40b134f$var$state","data","currentCountry","filterCountries","window","addEventListener","$8f6a480bb40b134f$var$getAllCountries","e","preventDefault","value","$8f6a480bb40b134f$var$getSearchedCountry","textContent","async","res","fetch","json","map","name","common","population","region","capital","img","flags","svg","subregion","domain","tld","sort","x","y","a","toUpperCase","b","forEach","_","i","html","insertAdjacentHTML","err","console","error","message","country","log","flag","el","target","closest","nameOfCountry","childNodes","firstElementChild","borders","join"],"version":3,"file":"index.2b9f9588.js.map"}